---
import { useStoryblokApi } from "@storyblok/astro";
import StoryblokComponent from "@storyblok/astro/StoryblokComponent.astro";
import Layout from "../../layouts/Layout.astro";
import ProjectDetails from "../../components/storyblok/ProjectDetails.astro";
import PageTitle from "../../components/PageTitle.astro";
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import AltProjectLayout from "../../layouts/AltProjectLayout.astro";
import PagesLayout from "../../layouts/PagesLayout.astro";

export async function getStaticPaths() {
  const sbApi = useStoryblokApi();

  const { data } = await sbApi.get("cdn/stories", {
    content_type: "project",
    version:
      import.meta.env.STORYBLOK_IS_PREVIEW === "yes" ? "draft" : "published",
  });

  const stories = Object.values(data.stories);
  return stories.map((story: any) => {
    return {
      params: { slug: story.slug },
      props: { story },
    };
  });
}

const sbApi = useStoryblokApi();
const { data } = await sbApi.get("cdn/stories/", {
  version: "draft",
  content_type: "project",
});

let retrievedProject = {
  slug: "",
  name: "",
  content: { details: [{ alternativeLayout: false }] },
};

//Preview mode
if (import.meta.env.STORYBLOK_IS_PREVIEW === "yes") {
  const { slug } = Astro.params;
  console.log("slug", slug);

  const project = data.stories.find(
    (story: { slug: string }) => story.slug === slug
  );
  console.log("project", project);

  retrievedProject = project;
  console.log("content", retrievedProject);
} else {
  const { story } = Astro.props;
  retrievedProject = story;
  console.log("staticcontent", retrievedProject);
}

const projectIndex = data.stories.findIndex(
  (story: { slug: string }) => story.slug === retrievedProject.slug
);

const nextProjectSlug =
  data.stories[projectIndex + 1].full_slug || data.stories[0].full_slug;
const previousProjectSlug =
  data.stories[projectIndex - 1].full_slug ||
  data.stories[data.stories.length - 1].full_slug;
console.log("nextProjectSlug", nextProjectSlug);
const altLayout = retrievedProject.content.details[0].alternativeLayout;
---

<PagesLayout title={"Estelle Chauvard - " + retrievedProject.name}>
  {
    altLayout ? (
      <AltProjectLayout story={retrievedProject} />
    ) : (
      <ProjectLayout story={retrievedProject} />
    )
  }
</PagesLayout>

<script>
  const getUrl = (url: string) =>
    url.replace("//a.storyblok.com", "//a2.storyblok.com");

  const modal = document.getElementById("modal");
  const pictureContainer = document.createElement("img");

  modal?.appendChild(pictureContainer);

  pictureContainer.classList.add(
    "scale-0",
    "transition-all",
    "duration-300",
    "max-w-screen",
    "p-4",
    "md:p-16",
    "lg:p-24",
    "max-h-screen"
  );

  //Show modal when image is clicked
  const showModal = (image: HTMLElement) => {
    pictureContainer.src = getUrl(image.dataset.largeImage!);
    modal?.classList.remove("hidden");
    setTimeout(() => pictureContainer?.classList.add("scale-100"), 1);
  };
  //Hide modal when clicked
  const hideModal = () => {
    modal?.classList.add("hidden");
    pictureContainer?.classList.remove("scale-100");
    setTimeout(() => (pictureContainer.src = ""), 500);
  };

  modal?.addEventListener("click", hideModal);
  const images = document.getElementsByClassName(
    "clickable-picture"
  ) as HTMLCollectionOf<HTMLElement>;
  for (let i = 0; i < images.length; i++) {
    const image = images[i];
    image.addEventListener("click", (e) => {
      e.preventDefault();
      showModal(image);
    });
    image.addEventListener("mouseover", (e) => {
      new Image().src = getUrl(image.dataset.largeImage!);
    });
  }
</script>
