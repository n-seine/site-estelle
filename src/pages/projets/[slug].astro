---
import { useStoryblokApi } from "@storyblok/astro";
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import AltProjectLayout from "../../layouts/AltProjectLayout.astro";
import PagesLayout from "../../layouts/PagesLayout.astro";
import OtherProjects from "../../components/OtherProjects.astro";

interface Project {
  slug: string;
  full_slug: string;
  name: string;
  content: {
    details: [
      {
        alternativeLayout: boolean;
      },
    ];
  };
}

const getAllStories = async () => {
  const sbApi = useStoryblokApi();

  const { data } = await sbApi.get("cdn/stories", {
    content_type: "project",
    version:
      import.meta.env.STORYBLOK_IS_PREVIEW === "yes" ? "draft" : "published",
  });

  const stories = Object.values(data.stories);
  return stories as Project[];
};

export async function getStaticPaths() {
  const sbApi = useStoryblokApi();

  const { data } = await sbApi.get("cdn/stories", {
    content_type: "project",
    version:
      import.meta.env.STORYBLOK_IS_PREVIEW === "yes" ? "draft" : "published",
  });

  const stories = Object.values(data.stories);
  return stories.map((story: any) => {
    return {
      params: { slug: story.slug },
      props: { story },
    };
  });
}

let retrievedProject = {
  slug: "",
  name: "",
  content: { details: [{ alternativeLayout: false }] },
};

//Preview mode
if (import.meta.env.STORYBLOK_IS_PREVIEW === "yes") {
  const { slug } = Astro.params;
  const sbApi = useStoryblokApi();
  const { data } = await sbApi.get("cdn/stories/", {
    version: "draft",
    content_type: "project",
  });

  const project = data.stories.find(
    (story: { slug: string }) => story.slug === slug
  );

  retrievedProject = project;
} else {
  //SSG mode
  const { story } = Astro.props;
  retrievedProject = story;
}

const stories = await getAllStories();
const projectIndex = stories.findIndex(
  (story) => story?.slug === retrievedProject.slug
);
const nextProject = {
  slug:
    projectIndex === stories.length - 1
      ? stories[0].slug
      : stories[projectIndex + 1].slug,
  name:
    projectIndex === stories.length - 1
      ? stories[0].name
      : stories[projectIndex + 1].name,
};
const previousProject = {
  slug:
    projectIndex === 0
      ? stories[stories.length - 1].slug
      : stories[projectIndex - 1].slug,
  name:
    projectIndex === 0
      ? stories[stories.length - 1].name
      : stories[projectIndex - 1].name,
};
const altLayout = retrievedProject.content.details[0].alternativeLayout;
---

<PagesLayout title={"Estelle Chauvard - " + retrievedProject.name}>
  {
    altLayout ? (
      <>
        <AltProjectLayout story={retrievedProject} />
        <OtherProjects previous={previousProject} next={nextProject} />
      </>
    ) : (
      <>
        <ProjectLayout story={retrievedProject} />
        <OtherProjects previous={previousProject} next={nextProject} />
      </>
    )
  }
</PagesLayout>

<script is:inline>
  // function getUrl(url) {
  //   url.replace("//a.storyblok.com", "//a2.storyblok.com")}

  //Show modal when image is clicked

  function addEventListenerToPictures(pictureContainer, modal, images) {
    function showModal(image, modal, pictureContainer) {
      pictureContainer.src = image.dataset.largeImage;
      modal?.classList.remove("hidden");
      setTimeout(() => pictureContainer?.classList.add("scale-100"), 1);
    }
    //Hide modal when clicked
    function hideModal(modal, pictureContainer) {
      modal?.classList.add("hidden");
      pictureContainer?.classList.remove("scale-100");
      setTimeout(() => (pictureContainer.src = ""), 500);
    }
    modal?.appendChild(pictureContainer);
    modal?.addEventListener("click", (e) => hideModal(modal, pictureContainer));

    pictureContainer.classList.add(
      "scale-0",
      "transition-all",
      "duration-300",
      "max-w-screen",
      "p-4",
      "md:p-16",
      "lg:p-24",
      "max-h-screen"
    );

    for (let i = 0; i < images.length; i++) {
      const image = images[i];
      image.addEventListener("click", (e) => {
        e.preventDefault();
        showModal(image, modal, pictureContainer);
      });
      image.addEventListener("mouseover", (e) => {
        new Image().src = image.dataset.largeImage;
      });
    }
  }

  function setAllEventListenersOnPage() {
    const modal = document.getElementById("modal");
    const pictureContainer = document.createElement("img");
    const images = document.getElementsByClassName("clickable-picture");
    console.log("images", images);
    addEventListenerToPictures(pictureContainer, modal, images);
  }
  setAllEventListenersOnPage();
</script>
